{"version":3,"file":"static/js/Search.79e534e3.chunk.js","mappings":"gLA6CA,UA1CmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,gCACGF,IACC,eAAIG,UAAU,aAAd,SACGH,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaF,GACfG,MAAO,CACLC,KAAMR,EAASS,SAAWT,EAASU,QAHvC,SAMGL,KAPID,EADC,OAchB,SAAC,KAAD,IACoB,KAAb,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQY,SAAoC,YAApBX,EAASU,SAChC,2DAIP,C,2HCiBD,UAxCe,WACb,OAAsCE,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,6FACEN,GAAW,GADb,UAE4BO,EAAAA,EAAAA,IAAYH,GAFxC,gBAEUI,EAFV,EAEUA,QACRV,EAAeU,GACfR,GAAW,GAJb,4CAHc,sBACTI,GADS,mCAUdK,EACD,GAAE,CAACL,IASJ,OACE,iCACE,kBAAMlB,UAAU,kBAAkBwB,SATjB,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACnBX,EAAgB,CAAEC,MAAOS,EAAKE,SAASlB,YAAYmB,QACnDH,EAAKI,OACN,EAIG,WACE,4BACE,kBAAOC,KAAK,OAAOC,KAAK,mBAE1B,mBAAQD,KAAK,SAAb,oBACCd,IAAUL,IAAW,SAAC,UAAD,CAAYhB,OAAQc,OAE3CE,IAAW,SAAC,IAAD,MAGjB,C,sLC1CD,EAFgB,mCCEHqB,EAAmB,mCAAG,uGAElBC,MAAM,2DAAD,OAC2CC,IAC3DC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IAR8B,wEAU/BC,QAAQC,IAAR,MAV+B,wDAAH,qDAcnBrB,EAAW,mCAAG,WAAMH,GAAN,0FAEViB,MAAM,qDAAD,OACqCC,EADrC,kBACsDlB,IACtEmB,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IARsB,wEAUvBC,QAAQC,IAAR,MAVuB,wDAAH,sDAcXC,EAAiB,mCAAG,WAAMC,GAAN,0FAEhBT,MAAM,sCAAD,OACsBS,EADtB,oBACyCR,IACzDC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IAR4B,wEAU7BC,QAAQC,IAAR,MAV6B,wDAAH,sDAcjBG,EAAc,mCAAG,WAAMD,GAAN,0FAEbT,MAAM,sCAAD,OACsBS,EADtB,4BACiDR,IACjEC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IARyB,wEAU1BC,QAAQC,IAAR,MAV0B,wDAAH,sDAcdI,EAAiB,mCAAG,WAAMF,GAAN,0FAEhBT,MAAM,sCAAD,OACsBS,EADtB,4BACiDR,IACjEC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IAR4B,wEAU7BC,QAAQC,IAAR,MAV6B,wDAAH,qD","sources":["components/MoviesList/index.jsx","components/Search/index.jsx","services/apiKey.jsx","services/api.jsx"],"sourcesContent":["import { Link, Outlet, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      {movies && (\n        <ul className=\"moviesList\">\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link\n                to={`/movies/${id}`}\n                state={{\n                  from: location.pathname + location.search,\n                }}\n              >\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      <Outlet />\n      {movies?.length === 0 && location.search !== '?query=' && (\n        <div>Sorry, there are no results</div>\n      )}\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      genre_ids: PropTypes.arrayOf(PropTypes.number).isRequired,\n      overview: PropTypes.string,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string,\n      vote_average: PropTypes.number,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovie } from 'services/api';\nimport MoviesList from 'components/MoviesList';\nimport Loader from 'components/Loader';\n\nconst Search = () => {\n  const [searchQuery, setSearchQuery] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    async function fetchMovieOnQuery() {\n      setLoading(true);\n      const { results } = await searchMovie(query);\n      setSearchQuery(results);\n      setLoading(false);\n    }\n\n    fetchMovieOnQuery();\n  }, [query]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    setSearchParams({ query: form.elements.searchQuery.value });\n    form.reset();\n  };\n\n  return (\n    <>\n      <form className=\"searchMovieForm\" onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" name=\"searchQuery\" />\n        </label>\n        <button type=\"submit\">Search</button>\n        {query && !loading && <MoviesList movies={searchQuery} />}\n      </form>\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default Search;\n","const API_KEY = '16b99e0971797b79067f0be2bdb79de1';\n\nexport default API_KEY;\n","import api_key from './apiKey';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMovie = async query => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${query}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["movies","location","useLocation","className","map","id","title","to","state","from","pathname","search","length","useState","searchQuery","setSearchQuery","loading","setLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","searchMovie","results","fetchMovieOnQuery","onSubmit","event","preventDefault","form","currentTarget","elements","value","reset","type","name","fetchTrendingMovies","fetch","api_key","then","response","ok","json","console","log","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}