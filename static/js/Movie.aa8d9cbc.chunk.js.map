{"version":3,"file":"static/js/Movie.aa8d9cbc.chunk.js","mappings":"2OAsEA,UA3Dc,WACZ,IAAIA,GAASC,EAAAA,EAAAA,MACb,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,0FACEL,EADF,UACqBM,EAAAA,EAAAA,IAAkBV,EAAOW,SAD9C,8EADc,uBAAC,WAAD,wBAIdC,EACD,GAAE,CAACZ,EAAOW,UAEX,IAIQE,EACNV,EADMU,MAAOC,EACbX,EADaW,OAAQC,EACrBZ,EADqBY,SAAUC,EAC/Bb,EAD+Ba,YAAaC,EAC5Cd,EAD4Cc,aAAcC,EAC1Df,EAD0De,aAEtDC,EAA8B,KAAdhB,EAEtB,OACE,iCACIgB,IAAiB,SAAC,IAAD,KACnB,mBAAQC,KAAK,SAASC,QAXR,WAAO,IAAD,IACtBd,EAAQ,iBAACF,QAAD,IAACA,GAAD,UAACA,EAAUiB,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,IACnC,EASG,sBAGA,4BACE,gBACEC,IACER,EAAW,0CAC4BA,GACnC,oHAENS,IAAKZ,KAEP,2BACGA,EADH,IACW,IAAIa,KAAKT,GAAcU,cADlC,QAGA,0CAAkBT,EAAlB,QACA,wCAAgBH,MAChB,sCACWI,GAAiBL,EAAOc,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,UAEjE,iBAAKC,UAAU,WAAf,WACE,sDACA,SAAC,KAAD,CAAMC,GAAG,OAAOX,MAAOjB,EAASiB,MAAhC,kBAEQ,KACR,SAAC,KAAD,CAAMW,GAAG,UAAUX,MAAOjB,EAASiB,MAAnC,4BAKJ,SAAC,KAAD,MAGL,C,sLClED,EAFgB,mCCEHY,EAAmB,mCAAG,uGAElBC,MAAM,2DAAD,OAC2CC,IAC3DC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IAR8B,wEAU/BC,QAAQC,IAAR,MAV+B,wDAAH,qDAcnBC,EAAW,mCAAG,WAAMC,GAAN,0FAEVT,MAAM,qDAAD,OACqCC,EADrC,kBACsDQ,IACtEP,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IARsB,wEAUvBC,QAAQC,IAAR,MAVuB,wDAAH,sDAcXhC,EAAiB,mCAAG,WAAMC,GAAN,0FAEhBwB,MAAM,sCAAD,OACsBxB,EADtB,oBACyCyB,IACzDC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IAR4B,wEAU7BC,QAAQC,IAAR,MAV6B,wDAAH,sDAcjBG,EAAc,mCAAG,WAAMlC,GAAN,0FAEbwB,MAAM,sCAAD,OACsBxB,EADtB,4BACiDyB,IACjEC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IARyB,wEAU1BC,QAAQC,IAAR,MAV0B,wDAAH,sDAcdI,EAAiB,mCAAG,WAAMnC,GAAN,0FAEhBwB,MAAM,sCAAD,OACsBxB,EADtB,4BACiDyB,IACjEC,MAAK,SAAAC,GACL,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EAASE,MAEnB,IAR4B,wEAU7BC,QAAQC,IAAR,MAV6B,wDAAH,qD","sources":["components/Movie/index.jsx","services/apiKey.jsx","services/api.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  useParams,\n  Link,\n  Outlet,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport { fetchMovieDetails } from 'services/api';\nimport Loader from 'components/Loader';\n\nconst Movie = () => {\n  let params = useParams();\n  const [movieInfo, setMovieInfo] = useState('');\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function setDetails() {\n      setMovieInfo(await fetchMovieDetails(params.movieId));\n    }\n    setDetails();\n  }, [params.movieId]);\n\n  const onBackBtn = () => {\n    navigate(location?.state?.from ?? '/');\n  };\n\n  const { title, genres, overview, poster_path, release_date, vote_average } =\n    movieInfo;\n  const movieInfoTrue = movieInfo !== '';\n\n  return (\n    <>\n      {!movieInfoTrue && <Loader />}\n      <button type=\"button\" onClick={onBackBtn}>\n        Go back\n      </button>\n      <div>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n              : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n          }\n          alt={title}\n        />\n        <div>\n          {title}({new Date(release_date).getFullYear()})\n        </div>\n        <div>User score: {vote_average}%</div>\n        <div>Overview: {overview}</div>\n        <div>\n          Genres: {movieInfoTrue && genres.map(genre => genre.name).join(', ')}\n        </div>\n        <div className=\"moreInfo\">\n          <div>Additional information:</div>\n          <Link to=\"cast\" state={location.state}>\n            Cast\n          </Link>{' '}\n          <Link to=\"reviews\" state={location.state}>\n            Reviews\n          </Link>\n        </div>\n      </div>\n      <Outlet />\n    </>\n  );\n};\n\nexport default Movie;\n","const API_KEY = '16b99e0971797b79067f0be2bdb79de1';\n\nexport default API_KEY;\n","import api_key from './apiKey';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMovie = async query => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${query}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${api_key}`\n    ).then(response => {\n      if (response.ok === true) {\n        return response.json();\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["params","useParams","useState","movieInfo","setMovieInfo","location","useLocation","navigate","useNavigate","useEffect","fetchMovieDetails","movieId","setDetails","title","genres","overview","poster_path","release_date","vote_average","movieInfoTrue","type","onClick","state","from","src","alt","Date","getFullYear","map","genre","name","join","className","to","fetchTrendingMovies","fetch","api_key","then","response","ok","json","console","log","searchMovie","query","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}